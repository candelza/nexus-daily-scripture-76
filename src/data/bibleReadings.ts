import { supabase } from '@/integrations/supabase/client';

export interface BibleReading {
  id: string;
  date: string;
  oldTestament: {
    book: string;
    chapter: string;
    verses: string;
    text: string;
  };
  newTestament: {
    book: string;
    chapter: string;
    verses: string;
    text: string;
  };
  psalm: {
    book: string;
    chapter: string;
    verses: string;
    text: string;
  };
}

export interface DailyReading {
  date: string;
  readings: {
    id: string;
    book: string;
    chapter: number;
    verses: string;
    text: string;
    theme?: string;
  }[];
}

// Get today's reading from Supabase
export const getTodayReading = async (): Promise<BibleReading> => {
  const today = new Date().toISOString().split('T')[0];
  console.log('üîç [bibleReadings] Fetching reading for date:', today);
  
  try {
    if (!supabase) {
      throw new Error('Supabase client is not initialized');
    }
    
    console.log('üîç [bibleReadings] Supabase client initialized, fetching data...');
    
    const { data, error } = await supabase
      .from('daily_readings')
      .select('*')
      .eq('date', today)
      .maybeSingle();

    console.log('üîç [bibleReadings] Supabase response:', { 
      hasData: !!data, 
      error: error?.message || 'No error',
      dataKeys: data ? Object.keys(data) : 'No data'
    });

    if (error) {
      console.error('‚ùå [bibleReadings] Error fetching today reading:', error);
      throw error;
    }

    // If no data for today, return fallback data
    if (!data) {
      console.log('‚ÑπÔ∏è [bibleReadings] No reading found for today, using fallback data');
      const fallbackData: BibleReading = {
        id: 'fallback',
        date: today,
        oldTestament: {
          book: "‡∏™‡∏∏‡∏†‡∏≤‡∏©‡∏¥‡∏ï",
          chapter: "3",
          verses: "5-6",
          text: "‡∏à‡∏á‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏¢‡πÇ‡∏Æ‡∏ß‡∏≤‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏î‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏≠‡∏á ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏à‡∏á‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∞‡∏≠‡∏á‡∏Ñ‡πå ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏à‡∏∞‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö"
        },
        newTestament: {
          book: "‡∏¢‡∏≠‡∏´‡πå‡∏ô",
          chapter: "3",
          verses: "16",
          text: "‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏£‡∏á‡∏£‡∏±‡∏Å‡πÇ‡∏•‡∏Å‡∏°‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏£‡∏á‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏û‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡∏≠‡∏á‡∏Ñ‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏ô‡∏≤‡∏® ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå"
        },
        psalm: {
          book: "‡∏™‡∏î‡∏∏‡∏î‡∏µ",
          chapter: "23",
          verses: "1-6",
          text: "‡∏û‡∏£‡∏∞‡πÄ‡∏¢‡πÇ‡∏Æ‡∏ß‡∏≤‡∏´‡πå‡∏ó‡∏£‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤ ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡∏ô ‡∏û‡∏£‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏£‡∏á‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏ô‡∏•‡∏≤‡∏ô‡∏´‡∏ç‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏ó‡∏£‡∏á‡∏û‡∏≤‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ô‡πâ‡∏≥‡∏™‡∏á‡∏ö"
        }
      };
      console.log('üì¶ [bibleReadings] Returning fallback data:', fallbackData);
      return fallbackData;
    }

    console.log('üì¶ [bibleReadings] Raw data received:', JSON.stringify(data, null, 2));
    
    // Ensure we have the expected data structure
    if (!data.readings || typeof data.readings !== 'object') {
      console.warn('‚ö†Ô∏è [bibleReadings] Unexpected data structure, missing readings:', data);
      throw new Error('Invalid data structure received from server');
    }
    
    // Type assertion for the readings object
    const readings = data.readings as {
      oldTestament?: {
        book?: string;
        chapter?: string | number;
        verses?: string;
        text?: string;
      };
      newTestament?: {
        book?: string;
        chapter?: string | number;
        verses?: string;
        text?: string;
      };
      psalm?: {
        book?: string;
        chapter?: string | number;
        verses?: string;
        text?: string;
      };
    };
    const result: BibleReading = {
      id: data.id,
      date: data.date,
      oldTestament: {
        book: readings.oldTestament?.book || '‡∏™‡∏∏‡∏†‡∏≤‡∏©‡∏¥‡∏ï',
        chapter: readings.oldTestament?.chapter?.toString() || '3',
        verses: readings.oldTestament?.verses || '5-6',
        text: readings.oldTestament?.text || '‡∏à‡∏á‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏¢‡πÇ‡∏Æ‡∏ß‡∏≤‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏î‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤...'
      },
      newTestament: {
        book: readings.newTestament?.book || '‡∏¢‡∏≠‡∏´‡πå‡∏ô',
        chapter: readings.newTestament?.chapter?.toString() || '3',
        verses: readings.newTestament?.verses || '16',
        text: readings.newTestament?.text || '‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏£‡∏á‡∏£‡∏±‡∏Å‡πÇ‡∏•‡∏Å‡∏°‡∏≤‡∏Å...'
      },
      psalm: {
        book: readings.psalm?.book || '‡∏™‡∏î‡∏∏‡∏î‡∏µ',
        chapter: readings.psalm?.chapter?.toString() || '23',
        verses: readings.psalm?.verses || '1-6',
        text: readings.psalm?.text || '‡∏û‡∏£‡∏∞‡πÄ‡∏¢‡πÇ‡∏Æ‡∏ß‡∏≤‡∏´‡πå‡∏ó‡∏£‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤...'
      }
    };
    
    console.log('‚úÖ [bibleReadings] Successfully processed reading:', result);
    return result;
  } catch (error) {
    console.error('Error in getTodayReading:', error);
    throw error; // Re-throw to be handled by the component
  }
};

// Get reading for a specific date from Supabase (for backward compatibility)
export const getReadingForDate = async (date: Date): Promise<DailyReading | null> => {
  const dateString = date.toISOString().split('T')[0];
  
  try {
    // Try to get reading from database first
    const { data, error } = await supabase
      .from('daily_readings')
      .select('*')
      .eq('date', dateString)
      .maybeSingle();

    if (data && !error) {
      // Convert new format to old format for backward compatibility
      const reading = data.readings as any;
      return {
        date: dateString,
        readings: [
          {
            id: `ot-${dateString}`,
            book: reading.oldTestament.book,
            chapter: parseInt(reading.oldTestament.chapter),
            verses: reading.oldTestament.verses,
            text: reading.oldTestament.text,
            theme: "‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°"
          },
          {
            id: `nt-${dateString}`,
            book: reading.newTestament.book,
            chapter: parseInt(reading.newTestament.chapter),
            verses: reading.newTestament.verses,
            text: reading.newTestament.text,
            theme: "‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"
          },
          {
            id: `psalm-${dateString}`,
            book: reading.psalm.book,
            chapter: parseInt(reading.psalm.chapter),
            verses: reading.psalm.verses,
            text: reading.psalm.text,
            theme: "‡∏™‡∏î‡∏∏‡∏î‡∏µ"
          }
        ]
      };
    }

    // If no specific reading found, generate a default one
    const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    
    const readings = [
      {
        id: `psalm-${((dayOfYear - 1) % 150) + 1}-daily`,
        book: "‡∏™‡∏î‡∏∏‡∏î‡∏µ",
        chapter: ((dayOfYear - 1) % 150) + 1,
        verses: "1-6",
        text: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏î‡∏∏‡∏î‡∏µ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${((dayOfYear - 1) % 150) + 1} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì`,
        theme: "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏ç‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤"
      },
      {
        id: `proverbs-${((dayOfYear - 1) % 31) + 1}-daily`,
        book: "‡∏™‡∏∏‡∏†‡∏≤‡∏©‡∏¥‡∏ï",
        chapter: ((dayOfYear - 1) % 31) + 1,
        verses: "1-10",
        text: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏∏‡∏†‡∏≤‡∏©‡∏¥‡∏ï ‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${((dayOfYear - 1) % 31) + 1} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì`,
        theme: "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
      }
    ];

    return {
      date: dateString,
      readings
    };

  } catch (error) {
    console.error('Error fetching reading from Supabase:', error);
    
    // Fallback to generated reading
    const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    
    return {
      date: dateString,
      readings: [
        {
          id: `psalm-${((dayOfYear - 1) % 150) + 1}-daily`,
          book: "‡∏™‡∏î‡∏∏‡∏î‡∏µ",
          chapter: ((dayOfYear - 1) % 150) + 1,
          verses: "1-6",
          text: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏™‡∏î‡∏∏‡∏î‡∏µ ‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${((dayOfYear - 1) % 150) + 1} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡∏∞‡∏Ñ‡∏±‡∏°‡∏†‡∏µ‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì`,
          theme: "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏ç‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤"
        }
      ]
    };
  }
};